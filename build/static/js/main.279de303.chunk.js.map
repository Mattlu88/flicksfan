{"version":3,"sources":["components/Header.module.css","components/Carousel.module.css","components/Header.js","services/movie.js","components/Carousel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","styles","header","logo","nav","popularMovies","a","axios","get","res","data","Carousel","caption","useState","content","setContent","useEffect","movieService","then","container","map","m","card","src","poster","alt","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qJACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,IAAM,sB,4DCApFD,EAAOC,QAAU,CAAC,UAAY,4BAA4B,QAAU,0BAA0B,KAAO,yB,0GCmBtFC,EAjBA,SAACC,GACd,OACE,4BAAQC,UAAWC,IAAOC,QACxB,yBAAKF,UAAWC,IAAOE,MACrB,kCAEF,yBAAKH,UAAWC,IAAOG,KACrB,4BACE,sCACA,qCACA,2C,iDCAK,GACbC,cAViB,uCAAG,4BAAAC,EAAA,+EAEAC,IAAMC,IAAN,UAJN,wBAIM,wBAFA,cAEZC,EAFY,yBAGXA,EAAIC,MAHO,wHAAH,sD,gBC2BJC,EA1BE,SAACZ,GAAW,IACnBa,EAAYb,EAAZa,QADkB,EAEIC,mBAAS,IAFb,mBAEnBC,EAFmB,KAEVC,EAFU,KAQ1B,OAJAC,qBAAU,WACRC,EAAaZ,gBAAgBa,MAAK,SAACR,GAAD,OAAUK,EAAWL,QACtD,IAGD,iCACE,yBAAKV,UAAWC,IAAOW,SACrB,4BAAKA,IAEP,yBAAKZ,UAAWC,IAAOkB,WACpBL,EAAQM,KAAI,SAACC,GAAD,OACX,yBAAKrB,UAAWC,IAAOqB,MACrB,6BACE,yBAAKC,IAAKF,EAAEG,OAAQC,IAAKJ,EAAEK,gBCR1BC,MATf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUY,QAAQ,2BCGJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.279de303.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3ks8C\",\"logo\":\"Header_logo__zZ5fd\",\"nav\":\"Header_nav__2qXSn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Carousel_container__3oSr_\",\"caption\":\"Carousel_caption__fLObg\",\"card\":\"Carousel_card__17UhM\"};","import React from \"react\";\r\nimport styles from './Header.module.css'\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className={styles.header}>\r\n      <div className={styles.logo}>\r\n        <h1>F</h1>\r\n      </div>\r\n      <nav className={styles.nav}>\r\n        <ul>\r\n          <li>Series</li>\r\n          <li>Films</li>\r\n          <li>My List</li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import axios from 'axios'\r\n\r\nconst baseUrl = 'http://localhost:3001'\r\n\r\nconst popularMovies = async () => {\r\n  try {\r\n    const res = await axios.get(`${baseUrl}/api/movies/popular`)\r\n    return res.data\r\n  } catch (error) {\r\n    return error\r\n  }\r\n}\r\n\r\nexport default {\r\n  popularMovies\r\n}","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport movieService from \"../services/movie\";\r\nimport styles from './Carousel.module.css'\r\n\r\nconst Carousel = (props) => {\r\n  const { caption } = props\r\n  const [content, setContent] = useState([]);\r\n\r\n  useEffect(() => {\r\n    movieService.popularMovies().then((data) => setContent(data));\r\n  }, []);\r\n\r\n  return (\r\n    <section>\r\n      <div className={styles.caption}>\r\n        <h2>{caption}</h2>\r\n      </div>\r\n      <div className={styles.container}>\r\n        {content.map((m) => (\r\n          <div className={styles.card}>\r\n            <div>\r\n              <img src={m.poster} alt={m.title} />\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Carousel;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header'\nimport Carousel from './components/Carousel'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Carousel caption='Popular on Flicksfan' />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}